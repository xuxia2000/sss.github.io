<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>模板引擎</title>
    <link href="/2021/06/18/freemarker/"/>
    <url>/2021/06/18/freemarker/</url>
    
    <content type="html"><![CDATA[<p>这是关于springboot支持的模板引擎freemarker的学习博客<br><a href="http://freemarker.foofun.cn/toc.html">中文文档</a></p><h2 id="官网对freemarker的介绍"><a href="#官网对freemarker的介绍" class="headerlink" title="官网对freemarker的介绍"></a>官网对freemarker的介绍</h2><blockquote><p> 模板 + 引擎 = 输出<br>    <img src="./images/1624029813827.png" alt="enter description here"></p></blockquote><h3 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h3><p>实际上用程序语言编写的程序就是模板。 FTL (代表FreeMarker模板语言)。 这是为编写模板设计的非常简单的编程语言。</p><p>模板(FTL编程)是由如下部分混合而成的：</p><ul><li>文本：文本会照着原样来输出。</li><li>插值：这部分的输出会被计算的值来替换。插值由 ${ and } 所分隔(或者 #{ and }，这种风格已经不建议再使用了；</li><li>FTL 标签：FTL标签和HTML标签很相似，但是它们却是给FreeMarker的指示， 而且不会打印在输出内容中。</li><li>注释：注释和HTML的注释也很相似，但它们是由 &lt;#– 和 –&gt;来分隔的。注释会被FreeMarker直接忽略， 更不会在输出内容中显示。</li></ul><h3 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;html&gt;<br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Welcome!<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="xml">  &lt;#-- Greet the user with his/her name --&gt;</span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Welcome $&#123;user&#125;!<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>We have these animals:</span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span><br><span class="xml">  &lt;#list animals as animal&gt;</span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>$&#123;animal.name&#125; for $&#123;animal.price&#125; Euros</span><br><span class="xml">  &lt;/#list&gt;</span><br><span class="xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br></code></pre></td></tr></table></figure><blockquote><p>FTL是区分大小写的。 list 是指令的名称而 List 就不是。类似地 ${name} 和 ${Name} 或 ${NAME} 也是不同的。请注意非常重要的一点： 插值 仅仅可以在 文本 中使用。 (也可以是字符串表达式；请参考 后续内容)FTL 标签 不可以在其他 FTL 标签 和 插值中使用。比如， 这样做是 错误 的： &lt;#if &lt;#include ‘foo’&gt;=’bar’&gt;…&lt;/#if&gt;注释 可以放在 FTL 标签 和 插值中。</p></blockquote><h2 id="模板引擎-结合springboot"><a href="#模板引擎-结合springboot" class="headerlink" title="模板引擎(结合springboot)"></a>模板引擎(结合springboot)</h2><h3 id="在springboot中集成freemarker"><a href="#在springboot中集成freemarker" class="headerlink" title="在springboot中集成freemarker"></a>在springboot中集成freemarker</h3><ul><li>所需要的maven依赖</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;dependency&gt;<br>    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>    &lt;artifactId&gt;spring-boot-starter-freemarker&lt;/artifactId&gt;<br>&lt;/dependency&gt;<br></code></pre></td></tr></table></figure><ul><li>配置信息</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs javascript">## Freemarker 配置<br>##模版存放路径（默认为 classpath:<span class="hljs-regexp">/templates/</span>）<br>spring.freemarker.template-loader-path=classpath:<span class="hljs-regexp">/templates/</span><br>##是否生成缓存，生成环境建议开启（默认为<span class="hljs-literal">true</span>）<br>spring.freemarker.cache=<span class="hljs-literal">false</span><br>##编码<br>spring.freemarker.charset=UTF-<span class="hljs-number">8</span><br>spring.freemarker.check-template-location=<span class="hljs-literal">true</span><br>##content-type类型(默认为test/html)<br>spring.freemarker.content-type=text/html<br>## 设定所有request的属性在merge到模板的时候，是否要都添加到model中（默认为<span class="hljs-literal">false</span>）<br>spring.freemarker.expose-request-attributes=<span class="hljs-literal">false</span><br>##设定所有HttpSession的属性在merge到模板的时候，是否要都添加到model中.(默认为<span class="hljs-literal">false</span>)<br>spring.freemarker.expose-session-attributes=<span class="hljs-literal">false</span><br>##RequestContext属性的名称（默认为-）<br>spring.freemarker.request-context-attribute=request<br>##模板后缀(默认为.ftl)<br>spring.freemarker.suffix=.html<br><br></code></pre></td></tr></table></figure><ul><li>先modelAndView中写入输入，flt模板文件一般存在template/freemarker中</li></ul><blockquote><p>方法一   使用ModelMap</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/index&quot;)</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">index</span><span class="hljs-params">(ModelMap modelMap)</span></span>&#123;<br>       Map map = db.dbSources();<br>       modelMap.put(<span class="hljs-string">&quot;map&quot;</span>,map);<br>       <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;freemarker/index&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>方法二  使用ModelAndView，注意的是不能在接受参数时，直接传入modelAndView，没有绑定到模板，会产生错误</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapp</span><br>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> ModelAndView <span class="hljs-title">index</span><span class="hljs-params">(HttpServletRequest request)</span></span>&#123;<br>        ModelAndView modelAndView = <span class="hljs-keyword">new</span> ModelAndView(<span class="hljs-string">&quot;/freemarker/index&quot;</span>);<br>        Map map = db.dbSources();<br>        modelAndView.addObject(<span class="hljs-string">&quot;map&quot;</span>,map);<br>        <span class="hljs-keyword">return</span> modelAndView;<br>&#125;<br></code></pre></td></tr></table></figure><pre><code>&gt;方法三 使用model</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/index&quot;)</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">index</span><span class="hljs-params">(Model model)</span></span>&#123;<br>       Map map = db.dbSources();<br>       model.addAttribute(<span class="hljs-string">&quot;map&quot;</span>,map);<br>       <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;freemarker/index&quot;</span>;<br><br></code></pre></td></tr></table></figure><blockquote><p>总结，使用model和modelMap都可以，直接加入数据，然后重定向到页面，使用modelandview不行，必须进行绑定</p></blockquote><h3 id="数据的读取"><a href="#数据的读取" class="headerlink" title="数据的读取"></a>数据的读取</h3><h5 id="读取数据的方式"><a href="#读取数据的方式" class="headerlink" title="读取数据的方式"></a>读取数据的方式</h5><ul><li>指令</li><li>表达式</li><li>差值<br><a href="http://freemarker.foofun.cn/dgui_template.html">详细命令见官方文档</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>javaWeb</category>
      
    </categories>
    
    
    <tags>
      
      <tag>javaWeb</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>cookie</title>
    <link href="/2021/06/18/cookie/"/>
    <url>/2021/06/18/cookie/</url>
    
    <content type="html"><![CDATA[<p>这是关于javaWeb中cookie的学习博客，记录一些cookie的常见用法和细节</p><h2 id="javaWeb重定向"><a href="#javaWeb重定向" class="headerlink" title="javaWeb重定向"></a>javaWeb重定向</h2><blockquote><p>1、response.sendRedirect(“”)<br>2、</p></blockquote><h2 id="cookie的细节"><a href="#cookie的细节" class="headerlink" title="cookie的细节"></a>cookie的细节</h2><blockquote><p>1、cookie保存的是键值对<br>2、一个web站点可以给浏览器发送多个cookie，浏览器也可以存储多个cookie<br>3、浏览器一般只能存放300个cookie，每个cookie的大小限制为4KB<br>4、创建了cookie，并发送到浏览器，默认是会话级别的（存储在内存中），<br> 设置过期时间会让cookie存储在本地,将过期时间设为0；则是要删除cookie，设置时间的api是setMaxAge.<br>5、删除cookie时，路径要相同，否则不会被删除。</p></blockquote><h2 id="cookie常用api"><a href="#cookie常用api" class="headerlink" title="cookie常用api"></a>cookie常用api</h2><blockquote><p>1.setMaxAge  设置session有效期，正值为以秒计算过时失效,负值为关闭客户端失效,默认值为-1。<br>2、setDomain  用于指定只有请求了指定的域名，才会带上该cookie<br>3、setPath  只有访问该域名下的cookieDemo的这个路径地址才会带cookie<br>4、setValue  重置value的值</p></blockquote><h3 id="实例代码"><a href="#实例代码" class="headerlink" title="实例代码"></a>实例代码</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs javascript">protected <span class="hljs-keyword">void</span> doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123;<br><span class="hljs-comment">//获取客户段发过来的cookie</span><br>Cookie[] cookies = request.getCookies();<br><span class="hljs-keyword">if</span>(cookies!=<span class="hljs-literal">null</span>) &#123;<br><span class="hljs-keyword">for</span> (Cookie c : cookies) &#123;<br>System.out.println(c.getName()+<span class="hljs-string">&quot;=&quot;</span>+c.getValue());<br>&#125;<br>&#125;<br><br>response.getWriter().write(<span class="hljs-string">&quot;Hello cookie..&quot;</span>);<br><br><span class="hljs-comment">//添加多个cookie</span><br>Cookie cookie = <span class="hljs-keyword">new</span> Cookie(<span class="hljs-string">&quot;name&quot;</span>,<span class="hljs-string">&quot;刘备&quot;</span>);<br><span class="hljs-comment">//cookie的有效期</span><br><span class="hljs-comment">//正值为以秒计算过时失效,负值为关闭客户端失效,默认值为-1</span><br>cookie.setMaxAge(<span class="hljs-number">60</span>*<span class="hljs-number">60</span>*<span class="hljs-number">24</span>*<span class="hljs-number">3</span>);  <span class="hljs-comment">//设置有效期为3天</span><br>response.addCookie(cookie);<br>Cookie cookie2 = <span class="hljs-keyword">new</span> Cookie(<span class="hljs-string">&quot;age&quot;</span>,<span class="hljs-string">&quot;63&quot;</span>);<br>response.addCookie(cookie2);<br><br><span class="hljs-comment">//用于指定只有请求了指定的域名，才会带上该cookie</span><br>cookie.setDomain(<span class="hljs-string">&quot;.huaban.com&quot;</span>);<br><br><span class="hljs-comment">//只有访问该域名下的cookieDemo的这个路径地址才会带cookie</span><br>cookie.setPath(<span class="hljs-string">&quot;/CookieDemo&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="结合springboot返回cookie"><a href="#结合springboot返回cookie" class="headerlink" title="结合springboot返回cookie"></a>结合springboot返回cookie</h3>]]></content>
    
    
    <categories>
      
      <category>javaWeb</category>
      
    </categories>
    
    
    <tags>
      
      <tag>javaWeb</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>建立自己的博客</title>
    <link href="/2021/06/17/%E4%BD%BF%E7%94%A8hexo%E9%83%A8%E7%BD%B2%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E5%88%B0github%20page%E4%B8%8A/"/>
    <url>/2021/06/17/%E4%BD%BF%E7%94%A8hexo%E9%83%A8%E7%BD%B2%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E5%88%B0github%20page%E4%B8%8A/</url>
    
    <content type="html"><![CDATA[<p>总体来说，不是很难</p><p>*第一步，创建github仓库，注意名字一定要是  github用户名.github.io  (大坑，浪费我很多时间)</p><blockquote><p>使用hexo init 本地初始化时，可能会因为git 通过https克隆仓库失败，导致初始化不了，直接使用ssl克隆快速开始项目</p></blockquote><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs verilog">hexo init  <span class="hljs-comment">//初始化项目</span><br>hexo <span class="hljs-keyword">generate</span>   <span class="hljs-comment">//生成public静态文件</span><br>hexo server   <span class="hljs-comment">//运行，可在localhost:4040访问</span><br></code></pre></td></tr></table></figure><blockquote><p>先本地运行起hexo博客，即达到本地访问无问题，主要修改主题比较麻烦，在theme中放一个主题，修改_config.yml中的theme的指向，完成主题的更改<br>本地访问没有问题后使用如下指令部署到github服务器上</p></blockquote><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">hexo clean<br>hexo deploy  <span class="hljs-regexp">//</span>会将本地的public文件夹覆盖到仓库里面<br></code></pre></td></tr></table></figure><blockquote><p>值得说的是仓库名起错了，就太折腾了  <a href="https://blog.csdn.net/weixin_29092579/article/details/112100678">配置域名博客</a><br><a href="https://hexo.io/zh-cn/docs/">hexo中文网</a></p><p>如上教程绑定域名，在此提交文件后，会被取消掉，在source文件夹下创建CNAME文件，里面写入顶层域名（即服务器给你提供的那个），才不会被刷新掉</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>hexo</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2021/06/16/hello-world/"/>
    <url>/2021/06/16/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
